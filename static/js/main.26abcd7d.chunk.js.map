{"version":3,"sources":["components/Counter/CounterTable/CounterTable.module.css","components/Counter/Counter.module.css","components/UI/MyButton/MyButton.module.css","components/Counter/CounterTable/CounterTable.tsx","components/UI/MyButton/MyButton.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CounterTable","count","counterScoreClass","maxCount","s","counterScore","_active","className","wrapper","join","MyButton","children","onClickButton","disabled","props","onClick","button","Counter","incrementCount","minCount","useState","setCount","buttons","inc","App","setMinCount","setMaxCount","increment","setIncrement","value","onChange","e","currentTarget","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,aAAe,mCAAmC,QAAU,gC,iBCAtHD,EAAOC,QAAU,CAAC,QAAU,2B,kBCA5BD,EAAOC,QAAU,CAAC,OAAS,2B,gLCmBZC,EAXuC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAEjDC,EAAoBD,IAFkD,EAAdE,SAEf,CAACC,IAAEC,aAAcD,IAAEE,SAAW,CAACF,IAAEC,cAEhF,OACC,qBAAKE,UAAWH,IAAEI,QAAlB,SACC,sBAAMD,UAAWL,EAAkBO,KAAK,KAAxC,SAA+CR,O,8BCCnCS,EAR+B,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,SAAaC,EAAW,uDAChG,OACC,gDAAQC,QAASH,EAAeL,UAAWH,IAAEY,OAAQH,SAAUA,GAAcC,GAA7E,aACEH,MC0BWM,EA1B6B,SAAC,GAA0C,IAAzCd,EAAwC,EAAxCA,SAAUe,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,SAAc,EAC3DC,mBAAiBD,GAD0C,mBAC9ElB,EAD8E,KACvEoB,EADuE,KAerF,OACC,sBAAKd,UAAWH,IAAEI,QAAlB,UACC,cAAC,EAAD,CAAcL,SAAUA,EAAUF,MAAOA,IACzC,sBAAKM,UAAWH,IAAEkB,QAAlB,UACC,cAAC,EAAD,CAAUT,SAAUZ,IAAUkB,EAAUP,cAR7B,WACbS,EAASF,IAOP,8DACA,eAAC,EAAD,CAAUN,SAAUZ,IAAUE,EAAUS,cAAe,kBAjBvCW,EAiBuDL,OAhBrEjB,EAAQE,IACXkB,EAASpB,EAAQsB,GACbtB,EAAQsB,EAAMpB,GACjBkB,EAASlB,KAJM,IAACoB,GAiBhB,cAA0FL,YCV/EM,MAjBf,WACI,MAAgCJ,mBAAiB,GAAjD,mBAAOD,EAAP,KAAiBM,EAAjB,KACA,EAAgCL,mBAAiB,GAAjD,mBAAOjB,EAAP,KAAiBuB,EAAjB,KACA,EAAkCN,mBAAiB,GAAnD,mBAAOO,EAAP,KAAkBC,EAAlB,KAEF,OACE,sBAAKrB,UAAU,MAAf,UACE,cAAC,EAAD,CAASY,SAAU,EAAGhB,SAAU,EAAGe,eAAgB,IACjD,sBAAKX,UAAU,iBAAf,UACI,uBAAOsB,MAAOV,EAAUW,SAAU,SAACC,GAAD,OAAON,GAAaM,EAAEC,cAAcH,QAAQI,KAAK,WACnF,uBAAOJ,MAAO1B,EAAU2B,SAAU,SAACC,GAAD,OAAOL,GAAaK,EAAEC,cAAcH,QAAQI,KAAK,WACnF,uBAAOJ,MAAOF,EAAWG,SAAU,SAACC,GAAD,OAAOH,GAAcG,EAAEC,cAAcH,QAAQI,KAAK,kBCDlFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26abcd7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CounterTable_wrapper__20JOK\",\"counterScore\":\"CounterTable_counterScore__10tD1\",\"_active\":\"CounterTable__active__30nsg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1CMMN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"MyButton_button__fCN9j\"};","import React from 'react';\r\nimport s from './CounterTable.module.css'\r\n\r\ntype CounterTablePropsType = {\r\n\tcount: number\r\n\tmaxCount: number\r\n}\r\n\r\n\r\nconst CounterTable: React.FC<CounterTablePropsType> = ({count, maxCount}) => {\r\n\r\n\tconst counterScoreClass = count\t=== maxCount ? [s.counterScore, s._active] : [s.counterScore]\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<span className={counterScoreClass.join(' ')}>{count}</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CounterTable;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './MyButton.module.css'\r\n\r\ntype MyButtonPropsType = {\r\n\tonClickButton: () => void\r\n\tdisabled?: boolean\r\n}\r\n\r\nconst MyButton: React.FC<MyButtonPropsType> = ({children, onClickButton, disabled, ...props}) => {\r\n\treturn (\r\n\t\t<button onClick={onClickButton} className={s.button} disabled={disabled} {...props}>\r\n\t\t\t{children}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default MyButton;\r\n","import React, {useState} from 'react';\r\nimport s from './Counter.module.css'\r\nimport CounterTable from \"./CounterTable/CounterTable\";\r\nimport MyButton from \"../UI/MyButton/MyButton\";\r\n\r\ntype CounterPropsType = {\r\n\tmaxCount: number\r\n\tminCount: number\r\n\tincrementCount: number\r\n}\r\n\r\nconst Counter: React.FC<CounterPropsType> = ({maxCount, incrementCount, minCount}) => {\r\n\tconst [count, setCount] = useState<number>(minCount);\r\n\r\n\tconst increment = (inc: number) => {\r\n\t\tif (count < maxCount) {\r\n\t\t\tsetCount(count + inc)\r\n\t\t\tif (count + inc > maxCount) {\r\n\t\t\t\tsetCount(maxCount)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconst reset = () => {\r\n\t\tsetCount(minCount)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<CounterTable maxCount={maxCount} count={count}/>\r\n\t\t\t<div className={s.buttons}>\r\n\t\t\t\t<MyButton disabled={count === minCount} onClickButton={reset}>Сбросить</MyButton>\r\n\t\t\t\t<MyButton disabled={count === maxCount} onClickButton={() => increment(incrementCount)}>+{incrementCount}</MyButton>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Counter;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./components/Counter/Counter\";\n\nfunction App() {\n    const [minCount, setMinCount] = useState<number>(0)\n    const [maxCount, setMaxCount] = useState<number>(5)\n    const [increment, setIncrement] = useState<number>(1)\n\n  return (\n    <div className=\"App\">\n      <Counter minCount={0} maxCount={5} incrementCount={1} />\n        <div className=\"counter-setter\">\n            <input value={minCount} onChange={(e) => setMinCount(+e.currentTarget.value)} type=\"number\"/>\n            <input value={maxCount} onChange={(e) => setMaxCount(+e.currentTarget.value)} type=\"number\"/>\n            <input value={increment} onChange={(e) => setIncrement(+e.currentTarget.value)} type=\"number\"/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}